--- src_org/mod_auth_ldap.c	2006-07-12 02:40:56.000000000 +0200
+++ src/mod_auth_ldap.c	2009-08-18 11:45:46.519492600 +0200
@@ -47,7 +47,18 @@
 #error mod_auth_ldap requires APR-util to have LDAP support built in
 #endif
 
-/* per directory configuration */
+// macro definition for inheriting values
+#define INHERIT_VALUE(parent, child, field) \
+	if (parent->field && !child->field) {     ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, 0, \
+	         r->server, "[%d] auth_ldap setting property field from global setting"); child->field = parent->field; }
+
+/* per server configuration */
+typedef struct {
+    char *binddn;			/* DN to bind to server (can be NULL) */
+    char *bindpw;			/* Password to bind to server (can be NULL) */
+	char *url;				/* URL to host */
+} mod_auth_ldap_server_config_t;
+
 typedef struct {
     apr_pool_t *pool;			/* Pool that this config is allocated from */
 #if APR_HAS_THREADS
@@ -81,6 +92,7 @@
 					   it's the exact string passed by the HTTP client */
 
     int secure; 	            /* True if SSL connections are requested */
+	int has_global_config_checked; /* True if global config was already checked and injected */
 } mod_auth_ldap_config_t;
 
 typedef struct mod_auth_ldap_request_t {
@@ -104,6 +116,17 @@
 int mod_auth_ldap_check_user_id(request_rec *r);
 int mod_auth_ldap_auth_checker(request_rec *r);
 void *mod_auth_ldap_create_dir_config(apr_pool_t *p, char *d);
+int mod_auth_ldap_update_config(request_rec *r, mod_auth_ldap_config_t *sec);
+static const char *mod_auth_ldap_parse_url(cmd_parms *cmd, void *config, const char *url);
+
+/* 
+ * prototypes for AuthLDAPGlobal* patch
+ * Christopher Klein <ckl[at]ecw[dot]de> / http://wap.ecw.de
+ */
+static void *mod_auth_ldap_create_server_config(apr_pool_t *p, server_rec *s);
+static const char *set_global_bind_dn(cmd_parms *cmd, void *dummy, const char *arg);
+static const char *set_global_bind_pw(cmd_parms *cmd, void *dummy, const char *arg);
+static const char *set_global_url(cmd_parms *cmd, void *dummy, const char *arg);
 
 /* ---------------------------------------- */
 
@@ -309,7 +332,10 @@
         (mod_auth_ldap_request_t *)apr_pcalloc(r->pool, sizeof(mod_auth_ldap_request_t));
     ap_set_module_config(r->request_config, &auth_ldap_module, req);
 
-    if (!sec->enabled) {
+	// inject global LDAP setting
+	mod_auth_ldap_update_config(r, sec);
+
+	if (!sec->enabled) {
         return DECLINED;
     }
 
@@ -320,6 +346,8 @@
         return DECLINED;
     }
 
+
+
 start_over:
 
     /* There is a good AuthLDAPURL, right? */
@@ -414,6 +442,47 @@
     return OK;
 }
 
+/**
+ * Injects global LDAP settings from AuthLDAPGlobal* settings
+ * returns 0 if configuration has been alreday checked, returns 1 if configuration was updated
+ */
+int mod_auth_ldap_update_config(request_rec *r, mod_auth_ldap_config_t *sec)
+{
+
+	mod_auth_ldap_server_config_t *conf_srv = (mod_auth_ldap_server_config_t *)ap_get_module_config(r->server->module_config,
+                                                 &auth_ldap_module);
+
+	// create new parameter list
+	// using pool reference of server otherwise our configuration will be lost on next request (r->pool won't work!)
+	cmd_parms parms = {NULL, 0, -1, NULL, NULL, NULL, NULL, r->server->process->pool, NULL, r->server, NULL, NULL};
+
+	// skip injection if per_dir configuration is already checked => performance
+	if (sec->has_global_config_checked) {
+		return 0;
+
+	}
+
+	// inherit value from global configuration - if present
+	INHERIT_VALUE(conf_srv, sec, binddn);
+	INHERIT_VALUE(conf_srv, sec, bindpw);
+
+	if (conf_srv->url && (!sec->url || strlen(sec->url) == 0)) {
+		ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, 0, 
+			r->server, "[%d] auth_ldap Overwriting URL from parent"); 
+
+		sec->url = apr_pstrdup(r->server->process->pool, conf_srv->url);
+		
+		parms.pool = r->server->process->pool;
+		parms.server = r->server;
+									
+		mod_auth_ldap_parse_url(&parms, sec, sec->url);
+	}
+
+	// this configuration is now *pimped*
+	sec->has_global_config_checked = 1;
+
+	return 1;
+}
 
 /*
  * Authorisation Phase
@@ -433,15 +502,15 @@
  */
 int mod_auth_ldap_auth_checker(request_rec *r)
 {
-    int result = 0;
-    mod_auth_ldap_request_t *req =
+	mod_auth_ldap_request_t *req =
         (mod_auth_ldap_request_t *)ap_get_module_config(r->request_config,
         &auth_ldap_module);
-    mod_auth_ldap_config_t *sec =
-        (mod_auth_ldap_config_t *)ap_get_module_config(r->per_dir_config, 
+	mod_auth_ldap_config_t *sec = (mod_auth_ldap_config_t *)ap_get_module_config(r->per_dir_config, 
         &auth_ldap_module);
 
-    util_ldap_connection_t *ldc = NULL;
+	int result = 0;
+
+	util_ldap_connection_t *ldc = NULL;
     int m = r->method_number;
 
     const apr_array_header_t *reqs_arr = ap_requires(r);
@@ -452,7 +521,10 @@
     char *w, *value;
     int method_restricted = 0;
 
-    if (!sec->enabled) {
+	// update configuration from global settings
+	mod_auth_ldap_update_config(r, sec);
+
+	if (!sec->enabled) {
         return DECLINED;
     }
 
@@ -765,6 +837,19 @@
 
     sec->user_is_dn = 0;
     sec->compare_dn_on_server = 0;
+	sec->has_global_config_checked = 0;
+
+    return sec;
+}
+
+static void *mod_auth_ldap_create_server_config(apr_pool_t *p, server_rec *s)
+{
+	mod_auth_ldap_server_config_t *sec = 
+        (mod_auth_ldap_server_config_t *)apr_pcalloc(p, sizeof(mod_auth_ldap_server_config_t));
+
+    sec->binddn = NULL;
+    sec->bindpw = NULL;
+	sec->url = NULL;
 
     return sec;
 }
@@ -779,7 +864,7 @@
 {
     int result;
     apr_ldap_url_desc_t *urld;
-
+ 
     mod_auth_ldap_config_t *sec = config;
 
     ap_log_error(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, 0,
@@ -934,6 +1019,34 @@
     return NULL;
 }
 
+static const char *set_global_bind_dn(cmd_parms *cmd, void *dummy, const char *arg) {
+    server_rec *s = cmd->server;
+	mod_auth_ldap_server_config_t *serverconf = ap_get_module_config(s->module_config,
+		&auth_ldap_module);
+
+	serverconf->binddn = apr_pstrdup(cmd->pool, arg);
+
+	return NULL;
+}
+
+static const char *set_global_url(cmd_parms *cmd, void *dummy, const char *arg) {
+    server_rec *s = cmd->server;
+	mod_auth_ldap_server_config_t *serverconf = ap_get_module_config(s->module_config,
+		&auth_ldap_module);
+
+	serverconf->url = apr_pstrdup(cmd->pool, arg);
+
+	return NULL;
+}
+
+static const char *set_global_bind_pw(cmd_parms *cmd, void *dummy, const char *arg) {
+    server_rec *s = cmd->server;
+	mod_auth_ldap_server_config_t *serverconf = ap_get_module_config(s->module_config,
+		&auth_ldap_module);
+	serverconf->bindpw = apr_pstrdup(cmd->pool, arg);
+
+	return NULL;
+}
 
 command_rec mod_auth_ldap_cmds[] = {
     AP_INIT_TAKE1("AuthLDAPURL", mod_auth_ldap_parse_url, NULL, OR_AUTHCFG, 
@@ -959,9 +1072,18 @@
                   "where <i>username</i>\n"
                   "is the user name passed by the HTTP client. The search will be a subtree "
                   "search on the branch <b>ou=People, o=Airius</b>."),
+    
+    AP_INIT_TAKE1("AuthLDAPGlobalURL", set_global_url, NULL, OR_ALL, 
+				  "Global URL of LDAP connection. If AuthLDAPURL is not defined in <Directory> or <Location> tag, this URL will be taken"),
+
+    AP_INIT_TAKE1("AuthLDAPGlobalBindDN", set_global_bind_dn, NULL, OR_ALL, 
+				  "Global bind DN of LDAP connection. If AuthLDAPBindBN is not defined in <Directory> or <Location> tag, this DN will be taken"),
 
-    AP_INIT_TAKE1("AuthLDAPBindDN", ap_set_string_slot,
-                  (void *)APR_OFFSETOF(mod_auth_ldap_config_t, binddn), OR_AUTHCFG,
+    AP_INIT_TAKE1("AuthLDAPGlobalBindPassword", set_global_bind_pw, NULL, OR_ALL, 
+				  "Global bind password of LDAP connection. If AuthLDAPPassword is not defined in <Directory> or <Location> tag, this password be taken"),
+
+	AP_INIT_TAKE1("AuthLDAPBindDN", ap_set_string_slot,
+				  (void *)APR_OFFSETOF(mod_auth_ldap_config_t, binddn), OR_AUTHCFG,
                   "DN to use to bind to LDAP server. If not provided, will do an anonymous bind."),
 
     AP_INIT_TAKE1("AuthLDAPBindPassword", ap_set_string_slot,
@@ -1053,6 +1175,13 @@
         return OK;
     }
 
+	// check presence of AuthLDAPGlobal* settings
+	if (strlen(charset_confname) < 5) {
+		ap_log_error(APLOG_MARK, APLOG_DEBUG, APR_EBADPATH, s, "Length of charset confname is below 5, assuming use of AuthLDAPGlobal*");
+		return OK;
+	}
+
+
     charset_confname = ap_server_root_relative(p, charset_confname);
     if (!charset_confname) {
         ap_log_error(APLOG_MARK, APLOG_ERR, APR_EBADPATH, s,
@@ -1109,8 +1238,8 @@
 module auth_ldap_module = {
    STANDARD20_MODULE_STUFF,
    mod_auth_ldap_create_dir_config,	/* dir config creater */
-   NULL,				/* dir merger --- default is to override */
-   NULL,				/* server config */
+   NULL,
+   mod_auth_ldap_create_server_config, /* server config for AuthLDAPGlobal */
    NULL,				/* merge server config */
    mod_auth_ldap_cmds,			/* command table */
    mod_auth_ldap_register_hooks,	/* set up request processing hooks */
